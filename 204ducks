#!/usr/bin/env python3
##
## EPITECH PROJECT, 2019
## 204ducks_2018
## File description:
## 204ducks
##

from sys import stderr, argv
from statistics import stdev
from math import exp

def error(str: str):
    """Exits with str on error output."""
    stderr.write(str)
    exit(84)

def usage():
    """Displays usage."""
    print('USAGE\n\t./204ducks a\n')
    print('DESCRIPTION\n\ta\tconstant')

def duckReturn(min: float, data: float):
    """Get the proba after a min amount of ducks."""
    x = 1.0
    while (getProba(data, x / 60) - getProba(data, 0) < min):
        x += 0.1
    minute = int(x / 60)
    tenSec = int(x % 60 / 10)
    sec = int(x % 10)
    return minute, tenSec, sec


def getProba(data: float, t: float) -> float:
    """Get the probability for 1 t gave."""
    result = - data * exp(-t) - (4 - 3 * data) / 2 * exp(-2 * t) - \
        (2 * data - 4) / 4 * exp(-4 * t)
    return result

def display(data: float):
    """Displays results."""
    print('Average return time: {:.02f}' .format(data),
        'Standard deviation:',
        'Time after which 50% of the ducks are back: {0[0]}m {0[1]}{0[2]}s'
        .format(duckReturn(0.5, data)),
        'Time after which 99% of the ducks are back: {0[0]}m {0[1]}{0[2]}s'
        .format(duckReturn(0.99, data)),
        'Percentage of ducks back after 1 minute: {:.01f}%'
        .format((getProba(data, 1) - getProba(data, 0)) * 100),
        'Percentage of ducks back after 2 minutes: {:.01f}%'
        .format((getProba(data, 2) - getProba(data, 0)) * 100),
        sep='\n')

def ducks(data: float):
    """204ducks main function."""
    if data >= 0 and data <= 2.5:
        display(data)
    else:
        error('\'a\' must be a float constant between 0 and 2.5.\n')

if __name__ == "__main__":
    if len(argv) != 2:
        error('Invalid number of arguments, type \'-h\' for more informations.\n')
    elif len(argv) == 2 and argv[1] == "-h":
        usage()
    else:
        try:
            data = float(argv[1])
        except:
            error('\'a\' must be a float. \'-h\' for more informations.\n')
        ducks(data)
